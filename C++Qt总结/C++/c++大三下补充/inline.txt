个人观点:
inline函数是将自己像define代码块一样展开，展开成原型，没有了压栈、跳转、出栈、返回等操作，从而提高效率。
inline函数本质是增加了成员属性功能及具有返回值的代码块，严格意义上不属于函数。

1.作为一个关键字如同static, virtual一样放在函数的最前面.

2.表示该函数经常被用, 追求高效可用.

3.被inline修饰的函数不是调用型的,而是复制型的,有点像 #define出来的函数.

4.函数代码比较长的时候尽量不用, 太耗资源了.

5.inline修饰的函数最好不要声明, 直接定义比较符合规范, 
就算是在.h文件中也直接定义函数的内容.

6.不同于static，如果inline声明和定义分开，则声明和定义前都必须有inline。（static则声明就行）

7.inline函数里面不能有递归或调用递归函数;

8.inline函数的替换是在编译器进行，不像#define在与预编译期进行；

---------------------------------------------------------------------------------------------
inline函数与普通函数的区别举例:

int g(int x) 
{ 
   return x + x; 
} 
int f() 
{ 
   return g(); 
} 
这样f会调用g，然后g返回x + x给f，然后f继续把那个值返回给调用者。 

如果g是inline的话。f会被直接编译成:
int f() 
{ 
  return x + x; 
} 
相当于把g执行的操作直接融合到f里。这样减少了调用g消耗的时间，但同时也增大了f的尺寸。 
这就是inline函数，也就是所谓的内联函数。 

----------------------------------------------------------------- 
但是现在不是这样了。 
现在的编译器会自动决定是否对函数进行上面的操作，而不是根据你前面加不加inline。 
但是inline本身还是有另外一个意义： 
一个可执行文件的cpp文件中一个函数只能被定义一次。如果你把函数定义在一个.h文件中并让两个cpp包含就会造成这个函数分别在两个cpp中被定义产生错误。但是inline函数是允许在多个cpp中多次定义的，就解决了这个问题。

